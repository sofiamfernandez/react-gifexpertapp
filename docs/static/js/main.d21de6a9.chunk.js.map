{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAqB5C,OACI,0BAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,OASd,2BACGO,KAAM,OACNC,MAAQT,EACRU,SAtBe,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCWLO,EAXY,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAG/B,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAsBtC,OAhBDC,qBAAU,WAETxB,EAASC,GACJwB,MAAM,SAAAC,GAEHC,QAAQC,IAAIF,GAGZH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAInB,CAACpB,IAEIqB,EDlB0BO,CAAa5B,GAAjCa,EAFsB,EAE3BN,KAAaa,EAFc,EAEdA,QAErB,OACI,oCACA,wBAAIJ,UAAU,qCAAqChB,GAIjDoB,GAAW,uBAAGJ,UAAU,oCAAb,cAEb,yBAAKA,UAAU,aAIPH,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACImB,IAAKnB,EAAIC,IACLD,UEQboB,EA5Ba,WAAO,IAAD,EAEM5C,mBAAS,CAAC,WAFhB,mBAEvB6C,EAFuB,KAEX9C,EAFW,KAM9B,OACI,6BACI,4CACA,6BACA,kBAAC,EAAD,CAAaA,cAAiBA,IAI9B,4BAEQ8C,EAAWtB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACI6B,IAAM7B,EACNA,SAAYA,U,MChBxCgC,IAASC,OACH,kBAAC,EAAD,MAEJC,SAASC,eAAe,U","file":"static/js/main.d21de6a9.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');//inicia como string vacío. Debemos asignarle un valor inicial, si no ponemos nada, es undefined.\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    //el prevent default previene la función por defecto del formulario. Es decir que ya no es necesario refrescar la página para que cambie\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2) {\r\n            setCategories( cats => [ inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n        // console.log('Submit hecho')\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n               type= \"text\"\r\n               value={ inputValue}\r\n               onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory","\r\n\r\nexport const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=K58Gj1LqkKwxaSRmE46mvyW6KGgWZBgN`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}\r\n\r\nexport default getGifs","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n            {/* {img.title} */}\r\n        </div>\r\n    )\r\n}\r\nexport default GifGridItem\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__bounce\">{category}</h3>\r\n\r\n        {/* El amperson lo usamos en lugar del ? del ternario porque evaluamos una unica condicion, si es true se ejecuta loading, si no no hace nada. */}\r\n\r\n        { loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n    \r\n        <div className=\"card-grid\">\r\n                       \r\n                {\r\n                \r\n                images.map(img => (\r\n                    <GifGridItem\r\n                        key={img.id}\r\n                        {...img}\r\n                    />\r\n                ))       \r\n                }\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid","import {useState, useEffect} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n   useEffect(() => {\r\n\r\n    getGifs( category )\r\n        .then( imgs => {\r\n\r\n            console.log(imgs)\r\n        \r\n\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n     \r\n        })\r\n   }, [category])\r\n\r\n    return state; \r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport {GifGrid} from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Frozen']);\r\n    \r\n \r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <hr/>\r\n            <AddCategory setCategories = {setCategories}/>\r\n            {/* <button\r\n                onClick={handleAdd}\r\n            >AGREGAR</button> */}\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category= { category }\r\n                        />\r\n                        ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n      <GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}